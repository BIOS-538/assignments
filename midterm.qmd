---
title: "Midterm Qs Ideas"
format: html
editor: visual
---

# Midterm

## Topics to test

-   Making and using functions + documentation

-   Vectorization is better than for loops : a) in a normal function b) within a dplyr chain

-   

-   Minor points

    -   Why does assignment hide the result of the calculation; show two contexts where you see this (within other functions)

Others/more basic?

-   What does a histogram tell us? (hw1)

-   Vectors, assignment (hw2)

-   

# Question ideas

## 1. Check your understanding (5 x [1 point]{style="color: red;"} for each question)

### *1a. Quarto vs `.R`*

*Explain in your own words what an R Markdown/Quarto file is compared to a normal R script. Give one benefit of using these types of files.*

### *1b. Documentation*

*Why do we use documentation for our code? What is the importance of this?*

Make 2 R chunks for

-   Showing how to add comments to your code (# ..)

-   How to add documentation for a function using docstrings (#' ..)

### *1c. Troubleshooting*

*Name three ways to troubleshoot error messages. What is your workflow when R gives an error?*

Give 3 error messages you encountered along the process of solving this exam and explain how you interpreted and troubleshooted them

### *1d. Working directory*

-   What is the advantage of knowing about R's working directory? Hint: *loading .csv files.*

-   *Describe what a working directory is, why R needs us to define it, and write the function to find the current working directory in R.*

```{r}
getwd()
```

### *1e. R packages*

*What is a package in R? How do you install and load packages? How do you find the documentation for a package? BONUS: How can you download a package that is not on CRAN? (for example, on github)*

```{r loading-packages}
library(tidyverse)
```

## 2. Creating datasets.

### 2a. Make a tibble

Let's create datasets. First, create a tibble of 6 different names, one column of first names and another column of last names, you can choose any names you want. [(*1 point*)]{style="color: red;"}

```{r}




```

### 2b. Adding a column

Now, using a `mutate()` call, assign an age between 20-45 for each person, as another column to your data. There are multiple approaches you can use to do this. (2 pts)

```{r}

```

### 2c. Function with if else statements

*(note) think about which is better for this question: if_else vs case_when here)*

Finally, create a function that will tell you the favorite food of the person by taking their name as an argument. To do this, use if else statements and indexing of the dataset to compare ages. If someone is 20-29, their favorite food is fries. If they are 30-39, their favorite food is ice cream. If someone is 40 or older, their favorite food is pizza. [(2 *points*)]{style="color: red;"}

-   Do the same using use [`case_when()`](https://dplyr.tidyverse.org/reference/case_when.html) in a vectorized workflow?

```{r}

```

## 3. Working with existing datasets.

### 3a. Know thy data

We will be working with data about sleeping mammals. Write 1-2 sentences describing what the dataset contains and what the columns mean. [(*1 point*)]{style="color: red;"}

<https://rdrr.io/cran/ggplot2/man/msleep.html>

```{r}
library(ggplot2)


sleeping_data <- msleep
sleeping_data 
```

### 3b. Scatter plot

Next, create a scatterplot using the "sleep_total" column and the "bodywt" column. Color the data points by "vore" (this describes the diet of the species). Make the legend, axes, and labels pretty and easily interpretable (pick any color scheme you want). Add a best fit line. (hint. if the graph looks weird, try log transforming a variable)

#### 3b1. Do any patterns emerge? [(*1 point*)]{style="color: red;"}

##### (note: some data points will be removed. that is ok)

```{r}
ggplot(sleeping_data,
       aes(x = log(bodywt),
           y = sleep_total)) + 
  geom_point(sleeping_data,mapping=aes(color=vore))
```

#### 3b2. Reason for the pattern

Using internet search engines, find (and cite) a source that helps explain the pattern we are seeing with biological information. [(*1 point*)]{style="color: red;"}

## 4. What is a p-value really?

Remember to cite any sources you use. Explain what a p-value is and the common misconceptions about them. Why are p-values criticized? What are alternatives we can use? What is your opinion on p-values? (5 points. Your answer must discuss each topic above and should be 4-6 sentences long)

-   *(note) The question is too broad and loaded ; we shall pair it down - PK*

## 5. Bring your data (5 points)

Finding data to work with [(*5 points*)]{style="color: red;"}

Citing your sources, similar to what we did in class, find a figure from a paper and interpret what it is showing. Add the image into the Markdown file and also upload it to canvas, or add a link to the paper and write which figure it is. Recreate this figure in R in a way that you deem easier to understand. What challenges do you think scientists and authors have when creating and publishing figures that makes it difficult to always make a "proper" figure? (hint: google the term "publish or perish")

```{r}

```

## 6. Vectorized function (6 points)

-   Write a function that takes two or more numbers and adds them, called `plus`. [(*1 point*)]{style="color: red;"}

-   Modify this function now such that it can also take `characters` (instead of numbers), and combines them using the `cat()` function. [(*2 points*)]{style="color: red;"}

-   Now either modify this function or encompass this within another function (call it `vector_plus`) to work when the arguments provided are vectors (*of the same length*) rather than single objects. This function should output a vector of the same size as each of the input arguments. This should also return an informative error message when the vectors are not of the same length. [(*3 point*)]{style="color: red;"}

Note: For all the prompts above, call your function and show us the result for each clause provided

## 7. Vectorize anything [(3 points)]{style="color: red;"}

-   Use a `for` loop to print the data type of each column in a tibble (*use a data from above*) [(*0.5 point*)]{style="color: red;"}

-   Do the same now using vectorization instead of a loop - using the `map()` function (or any other such function). [(*2 point*)]{style="color: red;"}

    -   *Document your sources including which package this function is from* [(*0.5 point*)]{style="color: red;"}

    > (*goal*) do a for loop approach and purrr::map() based vectorization 1 with a dplyr workflow (map was not discussed but a goal here is to learn new functions from their documentation..// this should not be a bonus?)

## 8. Plot multiple columns [(*5 points*)]{style="color: red;"}

-   Use the dataset `df` below, plot y1, y2 and y3 in 3 different colours [(*2 points*)]{style="color: red;"}

```{r}
df <- tibble(x = 1:10, y1 = x, y2 = x^2, y3 = x^3)

```

-   Use `pivot_wider()` to reshape the data and make a similar `ggplot` with different colours [(2+*1 points*)]{style="color: red;"} (learn how to use the `pivot_wider()` function from documentation and cite your sources)

    -   (bonus) Discuss how this pivot_wider approach would be helpful compared to the previous approach [(*1 point*)]{style="color: red;"}
